/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Procesos;

import MenuPrincipal.MenuP;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class ProcesosVo extends javax.swing.JFrame {
    String IdRecinto;
    String IDCandidato;
    String VotoCa;
    String VotoPa;    
    /**
     * Creates new form ProcesosVo
     */
    public ProcesosVo() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Salir = new javax.swing.JButton();
        Ejecutar = new javax.swing.JButton();
        Fecha = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        Ejecutar.setText("Ejecutar");
        Ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EjecutarActionPerformed(evt);
            }
        });

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id Candidato", "Voto Candidato", "Voto Partido"
            }
        ));
        jScrollPane1.setViewportView(Tabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(96, Short.MAX_VALUE)
                .addComponent(Fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Ejecutar)
                .addGap(18, 18, 18)
                .addComponent(Salir)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Ejecutar)
                        .addComponent(Salir)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EjecutarActionPerformed
        // Obtener la fecha seleccionada del JDateChooser
        Date dateSeleccionada = Fecha.getDate();
        
        // Formatear la fecha seleccionada al formato del archivo
        SimpleDateFormat sdfArchivo = new SimpleDateFormat("dd/MM/yyyy");
        String fechaFormateada = sdfArchivo.format(dateSeleccionada);

        // Limpiar la tabla antes de mostrar nuevos resultados
        DefaultTableModel model = (DefaultTableModel) Tabla.getModel();
        model.setRowCount(0);

        buscarIdColegio(fechaFormateada);
        llenarTabla(IDCandidato, VotoCa, VotoPa);
    }//GEN-LAST:event_EjecutarActionPerformed

    private void buscarIdColegio(String fechaFormateada) {
         System.out.println("Fecha a buscar: " + fechaFormateada);

        try (BufferedReader br = new BufferedReader(new FileReader("Archivos\\Colegio.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(",");
                if (partes.length == 3 && partes[2].equals(fechaFormateada)) {
                    // Encontramos la fecha, rellenamos los campos
                    IdRecinto = partes[0].trim();
                    System.out.println("Recinto obtenido: "+IdRecinto);
                    String IdColegio = partes[1].trim();
                    System.out.println("Fecha encontrada");                    
                    buscarIdCandidato(IdColegio.trim());
                    return; // Terminamos la búsqueda una vez encontrada la fecha
                }
            }

            // Si llegamos aquí, el id no fue encontrado
            JOptionPane.showMessageDialog(this, "Fecha no encontrada", "Error", JOptionPane.ERROR_MESSAGE);

        } 
        catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void buscarIdCandidato(String IdColegio) {
        System.out.println("ID Colegio a buscar: " + IdColegio);

        try (BufferedReader br = new BufferedReader(new FileReader("Archivos\\DetallesColegio.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(",");
                if (partes.length == 1 && partes[0].equals(IdColegio)) {
                    System.out.println("Id Colegio encontrado");
                    // Encontramos el id, rellenamos los campos
                    String IdCandidato = partes[0].trim();                    
                    buscarCandidato(IdCandidato.trim());
                    return; // Terminamos la búsqueda una vez encontrado el id
                }
            }

            // Si llegamos aquí, el id no fue encontrado
            JOptionPane.showMessageDialog(this, "Id Candidato no encontrado", "Error", JOptionPane.ERROR_MESSAGE);

        } 
        catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void buscarCandidato(String IdCandidato) {
         System.out.println("Id Candidato a buscar: " + IdCandidato);

        try (BufferedReader br = new BufferedReader(new FileReader("Archivos\\Candidatos.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(",");
                if (partes.length == 5 && partes[0].equals(IdCandidato)) {
                    // Encontramos la fecha, rellenamos los campos
                    String IdPartido = partes[2].trim();
                    String IdCircunscripcion = partes[3].trim();
                    VotoCa = partes[4].trim();
                    System.out.println("Id Candidato encontrado"); 
                    IDCandidato = IdCandidato.trim();
                    buscarRecinto(IdCircunscripcion.trim());
                    buscarPartido(IdPartido.trim());
                    return; // Terminamos la búsqueda una vez encontrado el candidato
                }
            }

            // Si llegamos aquí, el id no fue encontrado
            JOptionPane.showMessageDialog(this, "Id Candidato no encontrado", "Error", JOptionPane.ERROR_MESSAGE);

        } 
        catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void buscarRecinto(String IdCircunscripcion) {
         System.out.println("ID Circunscripcion a buscar: " + IdCircunscripcion);

        try (BufferedReader br = new BufferedReader(new FileReader("Archivos\\Recintos.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(",");
                if (partes.length == 4 && partes[2].equals(IdCircunscripcion)) {
                    System.out.println("Id Circunscripcion encontrada");
                    // Encontramos el id, rellenamos los campos  
                    String Idrecinto = partes[0].trim();
                    if(Idrecinto.equals(IdRecinto)){
                        System.out.println("Recinto encontrado");
                        return; // Terminamos la búsqueda una vez encontrado el id
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Los recintos no coinciden", "Error", JOptionPane.ERROR_MESSAGE);                        
                        return;
                    }
                }
            }

            // Si llegamos aquí, el id no fue encontrado
            JOptionPane.showMessageDialog(this, "Id Circunscripcion no encontrada", "Error", JOptionPane.ERROR_MESSAGE);

        } 
        catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }    
    
    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        MenuP menu = new MenuP();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_SalirActionPerformed
 
    private void buscarPartido(String IdPartido){
         System.out.println("ID Partido a buscar: " + IdPartido);

        try (BufferedReader br = new BufferedReader(new FileReader("Archivos\\Partidos.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(",");
                if (partes.length == 3 && partes[0].equals(IdPartido)) {
                    // Encontramos el id, rellenamos los campos
                    VotoPa = partes[2].trim();
                    System.out.println("Id Partido encontrado");
                    return; // Terminamos la búsqueda una vez encontrado el recinto
                }
            }

            // Si llegamos aquí, el id no fue encontrado
            JOptionPane.showMessageDialog(this, "Id Partido no encontrado", "Error", JOptionPane.ERROR_MESSAGE);

        } 
        catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }       
    }
       
    private void llenarTabla(String IDCandidato, String VotoCa, String VotoPa) {
        DefaultTableModel model = (DefaultTableModel) Tabla.getModel();
        model.addRow(new Object[]{IDCandidato, VotoCa, VotoPa});
    }   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProcesosVo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProcesosVo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProcesosVo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProcesosVo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProcesosVo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Ejecutar;
    private com.toedter.calendar.JDateChooser Fecha;
    private javax.swing.JButton Salir;
    private javax.swing.JTable Tabla;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
